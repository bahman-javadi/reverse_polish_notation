from abc import abstractmethod
import multiprocessing as mp


class ProcessWithIPC(mp.Process):
    """
    A class inherited from multiprocessing. It holds an instance of multiprocessing.manager.
    The manager is used to share values with the spawned threads.
    _result_list is a list which is used by consumers to put processed results.
    get_result_queue() is the interface for collecting the results from the consumers.
    _shared_parameters is a dictionary for holding the shared values. The values are set via get_shared_parameter() and
    set_shared_parameter().
    """

    @abstractmethod
    def run(self):
        pass

    def __init__(self):
        super(ProcessWithIPC, self).__init__()
        self._manager = mp.Manager()
        self._shared_parameters = self._manager.dict()
        self._result_list = mp.Queue()
        self._exception_list = mp.Queue()

    def get_shared_parameter(self, parameter):
        """
        To be used to get value for a shared parameter
        :param parameter: parameter name, string
        :return: the value stored in the shared parameters
        """
        return self._shared_parameters[parameter]

    def set_shared_parameter(self, parameter, value):
        """
        To be used to set value for a shared parameter
        :param parameter: parameter name, string
        :param value: the value to be set for the shared parameter
        :return: None
        """
        self._shared_parameters[parameter] = value

    def get_result_queue(self):
        """
        get_result_queue() is the interface for collecting the results from the consumers.
        :return: the results generated by the consumer
        """
        return self._result_list

    def get_exception_queue(self):
        """
        To be used to return a list of exceptions caught in the run process.
        :return: a list of caught exceptions, if any
        """
        return self._result_list
